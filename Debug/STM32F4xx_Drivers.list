
STM32F4xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bec  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d94  08000d94  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d94  08000d94  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08000d94  08000d94  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d94  08000d94  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d94  08000d94  00010d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d98  08000d98  00010d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08000d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
 10 .bss          00000044  20000034  20000034  00020034  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  00020034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000182c  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000005c4  00000000  00000000  000218d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000198  00000000  00000000  00021e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000126  00000000  00000000  00022030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000357c  00000000  00000000  00022156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000020f2  00000000  00000000  000256d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000a3ce  00000000  00000000  000277c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000058c  00000000  00000000  00031b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00032120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000034 	.word	0x20000034
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000d7c 	.word	0x08000d7c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000038 	.word	0x20000038
 80001e4:	08000d7c 	.word	0x08000d7c

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <GPIO_PeriClockControl>:

#include <STM32F407xx_GPIO_driver.h>
/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	460b      	mov	r3, r1
 8000202:	70fb      	strb	r3, [r7, #3]
	if(EnorDi){
 8000204:	78fb      	ldrb	r3, [r7, #3]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d062      	beq.n	80002d0 <GPIO_PeriClockControl+0xd8>

				if(pGPIOx == GPIOA)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a64      	ldr	r2, [pc, #400]	; (80003a0 <GPIO_PeriClockControl+0x1a8>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d106      	bne.n	8000220 <GPIO_PeriClockControl+0x28>
				{
					GPIOA_PCLK_EN();
 8000212:	4b64      	ldr	r3, [pc, #400]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000216:	4a63      	ldr	r2, [pc, #396]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000218:	f043 0301 	orr.w	r3, r3, #1
 800021c:	6313      	str	r3, [r2, #48]	; 0x30
					}else if (pGPIOx == GPIOI)
					{
						GPIOI_PCLK_DI();
					}
	}
}
 800021e:	e0b9      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOB)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a61      	ldr	r2, [pc, #388]	; (80003a8 <GPIO_PeriClockControl+0x1b0>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d106      	bne.n	8000236 <GPIO_PeriClockControl+0x3e>
					GPIOB_PCLK_EN();
 8000228:	4b5e      	ldr	r3, [pc, #376]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022c:	4a5d      	ldr	r2, [pc, #372]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800022e:	f043 0302 	orr.w	r3, r3, #2
 8000232:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000234:	e0ae      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOC)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a5c      	ldr	r2, [pc, #368]	; (80003ac <GPIO_PeriClockControl+0x1b4>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d106      	bne.n	800024c <GPIO_PeriClockControl+0x54>
					GPIOC_PCLK_EN();
 800023e:	4b59      	ldr	r3, [pc, #356]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000242:	4a58      	ldr	r2, [pc, #352]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000244:	f043 0304 	orr.w	r3, r3, #4
 8000248:	6313      	str	r3, [r2, #48]	; 0x30
}
 800024a:	e0a3      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOD)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a58      	ldr	r2, [pc, #352]	; (80003b0 <GPIO_PeriClockControl+0x1b8>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d106      	bne.n	8000262 <GPIO_PeriClockControl+0x6a>
					GPIOD_PCLK_EN();
 8000254:	4b53      	ldr	r3, [pc, #332]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000258:	4a52      	ldr	r2, [pc, #328]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000260:	e098      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOE)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a53      	ldr	r2, [pc, #332]	; (80003b4 <GPIO_PeriClockControl+0x1bc>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d106      	bne.n	8000278 <GPIO_PeriClockControl+0x80>
					GPIOE_PCLK_EN();
 800026a:	4b4e      	ldr	r3, [pc, #312]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026e:	4a4d      	ldr	r2, [pc, #308]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000270:	f043 0310 	orr.w	r3, r3, #16
 8000274:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000276:	e08d      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOF)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a4f      	ldr	r2, [pc, #316]	; (80003b8 <GPIO_PeriClockControl+0x1c0>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d106      	bne.n	800028e <GPIO_PeriClockControl+0x96>
					GPIOF_PCLK_EN();
 8000280:	4b48      	ldr	r3, [pc, #288]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000284:	4a47      	ldr	r2, [pc, #284]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800028c:	e082      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOG)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a4a      	ldr	r2, [pc, #296]	; (80003bc <GPIO_PeriClockControl+0x1c4>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d106      	bne.n	80002a4 <GPIO_PeriClockControl+0xac>
					GPIOG_PCLK_EN();
 8000296:	4b43      	ldr	r3, [pc, #268]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029a:	4a42      	ldr	r2, [pc, #264]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800029c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a2:	e077      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOH)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a46      	ldr	r2, [pc, #280]	; (80003c0 <GPIO_PeriClockControl+0x1c8>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d106      	bne.n	80002ba <GPIO_PeriClockControl+0xc2>
					GPIOH_PCLK_EN();
 80002ac:	4b3d      	ldr	r3, [pc, #244]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b0:	4a3c      	ldr	r2, [pc, #240]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b8:	e06c      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOI)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a41      	ldr	r2, [pc, #260]	; (80003c4 <GPIO_PeriClockControl+0x1cc>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d168      	bne.n	8000394 <GPIO_PeriClockControl+0x19c>
					GPIOI_PCLK_EN();
 80002c2:	4b38      	ldr	r3, [pc, #224]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c6:	4a37      	ldr	r2, [pc, #220]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ce:	e061      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
					if(pGPIOx == GPIOA)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a33      	ldr	r2, [pc, #204]	; (80003a0 <GPIO_PeriClockControl+0x1a8>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d106      	bne.n	80002e6 <GPIO_PeriClockControl+0xee>
						GPIOA_PCLK_DI();
 80002d8:	4b32      	ldr	r3, [pc, #200]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002dc:	4a31      	ldr	r2, [pc, #196]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002de:	f023 0301 	bic.w	r3, r3, #1
 80002e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e4:	e056      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
					}else if (pGPIOx == GPIOB)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a2f      	ldr	r2, [pc, #188]	; (80003a8 <GPIO_PeriClockControl+0x1b0>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_PeriClockControl+0x104>
						GPIOB_PCLK_DI();
 80002ee:	4b2d      	ldr	r3, [pc, #180]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f2:	4a2c      	ldr	r2, [pc, #176]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002f4:	f023 0302 	bic.w	r3, r3, #2
 80002f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002fa:	e04b      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
					}else if (pGPIOx == GPIOC)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a2b      	ldr	r2, [pc, #172]	; (80003ac <GPIO_PeriClockControl+0x1b4>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_PeriClockControl+0x11a>
						GPIOC_PCLK_DI();
 8000304:	4b27      	ldr	r3, [pc, #156]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000308:	4a26      	ldr	r2, [pc, #152]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800030a:	f023 0304 	bic.w	r3, r3, #4
 800030e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000310:	e040      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
					}else if (pGPIOx == GPIOD)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a26      	ldr	r2, [pc, #152]	; (80003b0 <GPIO_PeriClockControl+0x1b8>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PeriClockControl+0x130>
						GPIOD_PCLK_DI();
 800031a:	4b22      	ldr	r3, [pc, #136]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031e:	4a21      	ldr	r2, [pc, #132]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000320:	f023 0308 	bic.w	r3, r3, #8
 8000324:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000326:	e035      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
					}else if (pGPIOx == GPIOE)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a22      	ldr	r2, [pc, #136]	; (80003b4 <GPIO_PeriClockControl+0x1bc>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <GPIO_PeriClockControl+0x146>
						GPIOE_PCLK_DI();
 8000330:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a1b      	ldr	r2, [pc, #108]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000336:	f023 0310 	bic.w	r3, r3, #16
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033c:	e02a      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
					}else if (pGPIOx == GPIOF)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a1d      	ldr	r2, [pc, #116]	; (80003b8 <GPIO_PeriClockControl+0x1c0>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PeriClockControl+0x15c>
						GPIOF_PCLK_DI();
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800034c:	f023 0320 	bic.w	r3, r3, #32
 8000350:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000352:	e01f      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
					}else if (pGPIOx == GPIOG)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a19      	ldr	r2, [pc, #100]	; (80003bc <GPIO_PeriClockControl+0x1c4>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PeriClockControl+0x172>
						GPIOG_PCLK_DI();
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000360:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000366:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000368:	e014      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
					}else if (pGPIOx == GPIOH)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <GPIO_PeriClockControl+0x1c8>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <GPIO_PeriClockControl+0x188>
						GPIOH_PCLK_DI();
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800037c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037e:	e009      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
					}else if (pGPIOx == GPIOI)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a10      	ldr	r2, [pc, #64]	; (80003c4 <GPIO_PeriClockControl+0x1cc>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d105      	bne.n	8000394 <GPIO_PeriClockControl+0x19c>
						GPIOI_PCLK_DI();
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038c:	4a05      	ldr	r2, [pc, #20]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800038e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000392:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	40020000 	.word	0x40020000
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40020400 	.word	0x40020400
 80003ac:	40020800 	.word	0x40020800
 80003b0:	40020c00 	.word	0x40020c00
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40021400 	.word	0x40021400
 80003bc:	40021800 	.word	0x40021800
 80003c0:	40021c00 	.word	0x40021c00
 80003c4:	40022000 	.word	0x40022000

080003c8 <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
		uint32_t temp=0; //temp. register
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]

		 //enable the peripheral clock

		 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2101      	movs	r1, #1
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff ff0c 	bl	80001f8 <GPIO_PeriClockControl>

		// configure the mode of gpio pin

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	795b      	ldrb	r3, [r3, #5]
 80003e4:	2b03      	cmp	r3, #3
 80003e6:	d820      	bhi.n	800042a <GPIO_Init+0x62>
		{
			//the non interrupt mode
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	795b      	ldrb	r3, [r3, #5]
 80003ec:	461a      	mov	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	791b      	ldrb	r3, [r3, #4]
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	fa02 f303 	lsl.w	r3, r2, r3
 80003f8:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	2103      	movs	r1, #3
 8000408:	fa01 f303 	lsl.w	r3, r1, r3
 800040c:	43db      	mvns	r3, r3
 800040e:	4619      	mov	r1, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	400a      	ands	r2, r1
 8000416:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	6819      	ldr	r1, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	697a      	ldr	r2, [r7, #20]
 8000424:	430a      	orrs	r2, r1
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	e0d0      	b.n	80005cc <GPIO_Init+0x204>
			}
		else{
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	795b      	ldrb	r3, [r3, #5]
 800042e:	2b04      	cmp	r3, #4
 8000430:	d117      	bne.n	8000462 <GPIO_Init+0x9a>
					{
						//1. configure the FTSR
						EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000432:	4b4b      	ldr	r3, [pc, #300]	; (8000560 <GPIO_Init+0x198>)
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	7912      	ldrb	r2, [r2, #4]
 800043a:	4611      	mov	r1, r2
 800043c:	2201      	movs	r2, #1
 800043e:	408a      	lsls	r2, r1
 8000440:	4611      	mov	r1, r2
 8000442:	4a47      	ldr	r2, [pc, #284]	; (8000560 <GPIO_Init+0x198>)
 8000444:	430b      	orrs	r3, r1
 8000446:	60d3      	str	r3, [r2, #12]
						//Clear the corresponding RTSR bit
						EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000448:	4b45      	ldr	r3, [pc, #276]	; (8000560 <GPIO_Init+0x198>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	7912      	ldrb	r2, [r2, #4]
 8000450:	4611      	mov	r1, r2
 8000452:	2201      	movs	r2, #1
 8000454:	408a      	lsls	r2, r1
 8000456:	43d2      	mvns	r2, r2
 8000458:	4611      	mov	r1, r2
 800045a:	4a41      	ldr	r2, [pc, #260]	; (8000560 <GPIO_Init+0x198>)
 800045c:	400b      	ands	r3, r1
 800045e:	6093      	str	r3, [r2, #8]
 8000460:	e035      	b.n	80004ce <GPIO_Init+0x106>

					}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	795b      	ldrb	r3, [r3, #5]
 8000466:	2b05      	cmp	r3, #5
 8000468:	d117      	bne.n	800049a <GPIO_Init+0xd2>
					{
						//1 . configure the RTSR
						EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800046a:	4b3d      	ldr	r3, [pc, #244]	; (8000560 <GPIO_Init+0x198>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	7912      	ldrb	r2, [r2, #4]
 8000472:	4611      	mov	r1, r2
 8000474:	2201      	movs	r2, #1
 8000476:	408a      	lsls	r2, r1
 8000478:	4611      	mov	r1, r2
 800047a:	4a39      	ldr	r2, [pc, #228]	; (8000560 <GPIO_Init+0x198>)
 800047c:	430b      	orrs	r3, r1
 800047e:	6093      	str	r3, [r2, #8]
						//Clear the corresponding RTSR bit
						EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000480:	4b37      	ldr	r3, [pc, #220]	; (8000560 <GPIO_Init+0x198>)
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	7912      	ldrb	r2, [r2, #4]
 8000488:	4611      	mov	r1, r2
 800048a:	2201      	movs	r2, #1
 800048c:	408a      	lsls	r2, r1
 800048e:	43d2      	mvns	r2, r2
 8000490:	4611      	mov	r1, r2
 8000492:	4a33      	ldr	r2, [pc, #204]	; (8000560 <GPIO_Init+0x198>)
 8000494:	400b      	ands	r3, r1
 8000496:	60d3      	str	r3, [r2, #12]
 8000498:	e019      	b.n	80004ce <GPIO_Init+0x106>

					}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	795b      	ldrb	r3, [r3, #5]
 800049e:	2b06      	cmp	r3, #6
 80004a0:	d115      	bne.n	80004ce <GPIO_Init+0x106>
					{
						//1. configure both FTSR and RTSR
						EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a2:	4b2f      	ldr	r3, [pc, #188]	; (8000560 <GPIO_Init+0x198>)
 80004a4:	689b      	ldr	r3, [r3, #8]
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	7912      	ldrb	r2, [r2, #4]
 80004aa:	4611      	mov	r1, r2
 80004ac:	2201      	movs	r2, #1
 80004ae:	408a      	lsls	r2, r1
 80004b0:	4611      	mov	r1, r2
 80004b2:	4a2b      	ldr	r2, [pc, #172]	; (8000560 <GPIO_Init+0x198>)
 80004b4:	430b      	orrs	r3, r1
 80004b6:	6093      	str	r3, [r2, #8]
						//Clear the corresponding RTSR bit
						EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b8:	4b29      	ldr	r3, [pc, #164]	; (8000560 <GPIO_Init+0x198>)
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	7912      	ldrb	r2, [r2, #4]
 80004c0:	4611      	mov	r1, r2
 80004c2:	2201      	movs	r2, #1
 80004c4:	408a      	lsls	r2, r1
 80004c6:	4611      	mov	r1, r2
 80004c8:	4a25      	ldr	r2, [pc, #148]	; (8000560 <GPIO_Init+0x198>)
 80004ca:	430b      	orrs	r3, r1
 80004cc:	60d3      	str	r3, [r2, #12]
					}
				//configuring the GPIO port selection in SYSCFG_EXTICR
				uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	791b      	ldrb	r3, [r3, #4]
 80004d2:	089b      	lsrs	r3, r3, #2
 80004d4:	74fb      	strb	r3, [r7, #19]
				uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	791b      	ldrb	r3, [r3, #4]
 80004da:	f003 0303 	and.w	r3, r3, #3
 80004de:	74bb      	strb	r3, [r7, #18]
				uint32_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a1f      	ldr	r2, [pc, #124]	; (8000564 <GPIO_Init+0x19c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d04e      	beq.n	8000588 <GPIO_Init+0x1c0>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a1e      	ldr	r2, [pc, #120]	; (8000568 <GPIO_Init+0x1a0>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d032      	beq.n	800055a <GPIO_Init+0x192>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a1c      	ldr	r2, [pc, #112]	; (800056c <GPIO_Init+0x1a4>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d02b      	beq.n	8000556 <GPIO_Init+0x18e>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a1b      	ldr	r2, [pc, #108]	; (8000570 <GPIO_Init+0x1a8>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d024      	beq.n	8000552 <GPIO_Init+0x18a>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a19      	ldr	r2, [pc, #100]	; (8000574 <GPIO_Init+0x1ac>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d01d      	beq.n	800054e <GPIO_Init+0x186>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a18      	ldr	r2, [pc, #96]	; (8000578 <GPIO_Init+0x1b0>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d016      	beq.n	800054a <GPIO_Init+0x182>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a16      	ldr	r2, [pc, #88]	; (800057c <GPIO_Init+0x1b4>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d00f      	beq.n	8000546 <GPIO_Init+0x17e>
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a15      	ldr	r2, [pc, #84]	; (8000580 <GPIO_Init+0x1b8>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d008      	beq.n	8000542 <GPIO_Init+0x17a>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a13      	ldr	r2, [pc, #76]	; (8000584 <GPIO_Init+0x1bc>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d101      	bne.n	800053e <GPIO_Init+0x176>
 800053a:	2308      	movs	r3, #8
 800053c:	e025      	b.n	800058a <GPIO_Init+0x1c2>
 800053e:	2300      	movs	r3, #0
 8000540:	e023      	b.n	800058a <GPIO_Init+0x1c2>
 8000542:	2307      	movs	r3, #7
 8000544:	e021      	b.n	800058a <GPIO_Init+0x1c2>
 8000546:	2306      	movs	r3, #6
 8000548:	e01f      	b.n	800058a <GPIO_Init+0x1c2>
 800054a:	2305      	movs	r3, #5
 800054c:	e01d      	b.n	800058a <GPIO_Init+0x1c2>
 800054e:	2304      	movs	r3, #4
 8000550:	e01b      	b.n	800058a <GPIO_Init+0x1c2>
 8000552:	2303      	movs	r3, #3
 8000554:	e019      	b.n	800058a <GPIO_Init+0x1c2>
 8000556:	2302      	movs	r3, #2
 8000558:	e017      	b.n	800058a <GPIO_Init+0x1c2>
 800055a:	2301      	movs	r3, #1
 800055c:	e015      	b.n	800058a <GPIO_Init+0x1c2>
 800055e:	bf00      	nop
 8000560:	40013c00 	.word	0x40013c00
 8000564:	40020000 	.word	0x40020000
 8000568:	40020400 	.word	0x40020400
 800056c:	40020800 	.word	0x40020800
 8000570:	40020c00 	.word	0x40020c00
 8000574:	40021000 	.word	0x40021000
 8000578:	40021400 	.word	0x40021400
 800057c:	40021800 	.word	0x40021800
 8000580:	40021c00 	.word	0x40021c00
 8000584:	40022000 	.word	0x40022000
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
				SYSCFG_PCLK_EN();
 800058c:	4b5b      	ldr	r3, [pc, #364]	; (80006fc <GPIO_Init+0x334>)
 800058e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000590:	4a5a      	ldr	r2, [pc, #360]	; (80006fc <GPIO_Init+0x334>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6453      	str	r3, [r2, #68]	; 0x44
				SYSCFG->EXTICR[temp1] |= portcode << ( temp2 * 4);
 8000598:	4a59      	ldr	r2, [pc, #356]	; (8000700 <GPIO_Init+0x338>)
 800059a:	7cfb      	ldrb	r3, [r7, #19]
 800059c:	3302      	adds	r3, #2
 800059e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80005a2:	7cbb      	ldrb	r3, [r7, #18]
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	409a      	lsls	r2, r3
 80005aa:	4855      	ldr	r0, [pc, #340]	; (8000700 <GPIO_Init+0x338>)
 80005ac:	7cfb      	ldrb	r3, [r7, #19]
 80005ae:	430a      	orrs	r2, r1
 80005b0:	3302      	adds	r3, #2
 80005b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

				// enabling the exti interrupt delivery using IMR
				EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005b6:	4b53      	ldr	r3, [pc, #332]	; (8000704 <GPIO_Init+0x33c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	7912      	ldrb	r2, [r2, #4]
 80005be:	4611      	mov	r1, r2
 80005c0:	2201      	movs	r2, #1
 80005c2:	408a      	lsls	r2, r1
 80005c4:	4611      	mov	r1, r2
 80005c6:	4a4f      	ldr	r2, [pc, #316]	; (8000704 <GPIO_Init+0x33c>)
 80005c8:	430b      	orrs	r3, r1
 80005ca:	6013      	str	r3, [r2, #0]
		}
		// configure the speed
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	799b      	ldrb	r3, [r3, #6]
 80005d0:	461a      	mov	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	689a      	ldr	r2, [r3, #8]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	2103      	movs	r1, #3
 80005ec:	fa01 f303 	lsl.w	r3, r1, r3
 80005f0:	43db      	mvns	r3, r3
 80005f2:	4619      	mov	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	400a      	ands	r2, r1
 80005fa:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	6899      	ldr	r1, [r3, #8]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	697a      	ldr	r2, [r7, #20]
 8000608:	430a      	orrs	r2, r1
 800060a:	609a      	str	r2, [r3, #8]

	    //configure the pupd settings
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	79db      	ldrb	r3, [r3, #7]
 8000610:	461a      	mov	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	fa02 f303 	lsl.w	r3, r2, r3
 800061c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	68da      	ldr	r2, [r3, #12]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	2103      	movs	r1, #3
 800062c:	fa01 f303 	lsl.w	r3, r1, r3
 8000630:	43db      	mvns	r3, r3
 8000632:	4619      	mov	r1, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	400a      	ands	r2, r1
 800063a:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	68d9      	ldr	r1, [r3, #12]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	697a      	ldr	r2, [r7, #20]
 8000648:	430a      	orrs	r2, r1
 800064a:	60da      	str	r2, [r3, #12]

		//configure the optype
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	7a1b      	ldrb	r3, [r3, #8]
 8000650:	461a      	mov	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	685a      	ldr	r2, [r3, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	4619      	mov	r1, r3
 8000668:	2301      	movs	r3, #1
 800066a:	408b      	lsls	r3, r1
 800066c:	43db      	mvns	r3, r3
 800066e:	4619      	mov	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	400a      	ands	r2, r1
 8000676:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	6859      	ldr	r1, [r3, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	697a      	ldr	r2, [r7, #20]
 8000684:	430a      	orrs	r2, r1
 8000686:	605a      	str	r2, [r3, #4]
	    //configure the alt functionality
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	795b      	ldrb	r3, [r3, #5]
 800068c:	2b02      	cmp	r3, #2
 800068e:	d131      	bne.n	80006f4 <GPIO_Init+0x32c>
		{
			//configure the alt function registers.
			uint8_t temp1, temp2;

			temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	791b      	ldrb	r3, [r3, #4]
 8000694:	08db      	lsrs	r3, r3, #3
 8000696:	72fb      	strb	r3, [r7, #11]
			temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	791b      	ldrb	r3, [r3, #4]
 800069c:	f003 0307 	and.w	r3, r3, #7
 80006a0:	72bb      	strb	r3, [r7, #10]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	7afa      	ldrb	r2, [r7, #11]
 80006a8:	3208      	adds	r2, #8
 80006aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006ae:	7abb      	ldrb	r3, [r7, #10]
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	220f      	movs	r2, #15
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	43db      	mvns	r3, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	7afa      	ldrb	r2, [r7, #11]
 80006c2:	4001      	ands	r1, r0
 80006c4:	3208      	adds	r2, #8
 80006c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	7afa      	ldrb	r2, [r7, #11]
 80006d0:	3208      	adds	r2, #8
 80006d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a5b      	ldrb	r3, [r3, #9]
 80006da:	461a      	mov	r2, r3
 80006dc:	7abb      	ldrb	r3, [r7, #10]
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	fa02 f303 	lsl.w	r3, r2, r3
 80006e4:	4618      	mov	r0, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	7afa      	ldrb	r2, [r7, #11]
 80006ec:	4301      	orrs	r1, r0
 80006ee:	3208      	adds	r2, #8
 80006f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
}
 80006f4:	bf00      	nop
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40013800 	.word	0x40013800
 8000704:	40013c00 	.word	0x40013c00

08000708 <GPIO_ReadFromInputPin>:


/*
 * Data read and write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value=(uint8_t)((pGPIOx->IDR>>PinNumber) & 0x1);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	691a      	ldr	r2, [r3, #16]
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	fa22 f303 	lsr.w	r3, r2, r3
 800071e:	b2db      	uxtb	r3, r3
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	73fb      	strb	r3, [r7, #15]
	return value;
 8000726:	7bfb      	ldrb	r3, [r7, #15]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <I2C_ExecuteAddressPhaseWrite>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );


static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
	uint8_t tempreg=SlaveAddr << 1;
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	73fb      	strb	r3, [r7, #15]
	tempreg &= ~(1);
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	f023 0301 	bic.w	r3, r3, #1
 800074c:	73fb      	strb	r3, [r7, #15]
	pI2Cx->DR=tempreg;
 800074e:	7bfa      	ldrb	r2, [r7, #15]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	611a      	str	r2, [r3, #16]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <I2C_ClearADDRFlag>:
		tempreg |= (1);
		pI2Cx->DR=tempreg;
}


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	uint8_t tempreg=pI2CHandle->pI2Cx->SR1;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	73fb      	strb	r3, [r7, #15]
	tempreg=pI2CHandle->pI2Cx->SR2;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	73fb      	strb	r3, [r7, #15]
	(void) tempreg;
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <I2C_GenerateStartCondition>:
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	601a      	str	r2, [r3, #0]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <I2C_GenerateStopCondition>:
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	601a      	str	r2, [r3, #0]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <I2C_PeriClockControl>:
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d120      	bne.n	8000818 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a22      	ldr	r2, [pc, #136]	; (8000864 <I2C_PeriClockControl+0xa0>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d106      	bne.n	80007ec <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 80007de:	4b22      	ldr	r3, [pc, #136]	; (8000868 <I2C_PeriClockControl+0xa4>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	4a21      	ldr	r2, [pc, #132]	; (8000868 <I2C_PeriClockControl+0xa4>)
 80007e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007e8:	6413      	str	r3, [r2, #64]	; 0x40
		{
			I2C3_PCLK_DI();
		}
	}

}
 80007ea:	e035      	b.n	8000858 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a1f      	ldr	r2, [pc, #124]	; (800086c <I2C_PeriClockControl+0xa8>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d106      	bne.n	8000802 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <I2C_PeriClockControl+0xa4>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <I2C_PeriClockControl+0xa4>)
 80007fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007fe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000800:	e02a      	b.n	8000858 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a1a      	ldr	r2, [pc, #104]	; (8000870 <I2C_PeriClockControl+0xac>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d126      	bne.n	8000858 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <I2C_PeriClockControl+0xa4>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	4a16      	ldr	r2, [pc, #88]	; (8000868 <I2C_PeriClockControl+0xa4>)
 8000810:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000814:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000816:	e01f      	b.n	8000858 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <I2C_PeriClockControl+0xa0>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d106      	bne.n	800082e <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <I2C_PeriClockControl+0xa4>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	4a10      	ldr	r2, [pc, #64]	; (8000868 <I2C_PeriClockControl+0xa4>)
 8000826:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800082a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800082c:	e014      	b.n	8000858 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a0e      	ldr	r2, [pc, #56]	; (800086c <I2C_PeriClockControl+0xa8>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d106      	bne.n	8000844 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <I2C_PeriClockControl+0xa4>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <I2C_PeriClockControl+0xa4>)
 800083c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000842:	e009      	b.n	8000858 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <I2C_PeriClockControl+0xac>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d105      	bne.n	8000858 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <I2C_PeriClockControl+0xa4>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	4a05      	ldr	r2, [pc, #20]	; (8000868 <I2C_PeriClockControl+0xa4>)
 8000852:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000856:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	40005400 	.word	0x40005400
 8000868:	40023800 	.word	0x40023800
 800086c:	40005800 	.word	0x40005800
 8000870:	40005c00 	.word	0x40005c00

08000874 <I2C_PeripheralControl>:
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d106      	bne.n	8000894 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f043 0201 	orr.w	r2, r3, #1
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE );
	}

}
 8000892:	e005      	b.n	80008a0 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE );
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f023 0201 	bic.w	r2, r3, #1
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	601a      	str	r2, [r3, #0]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2101      	movs	r1, #1
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff82 	bl	80007c4 <I2C_PeriClockControl>
	//Ack bit configuration
	uint32_t tempreg=0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
	tempreg |= (pI2CHandle->I2C_Config.I2C_AckControl)<< 10;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	7a5b      	ldrb	r3, [r3, #9]
 80008c8:	029b      	lsls	r3, r3, #10
 80008ca:	461a      	mov	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	601a      	str	r2, [r3, #0]
	//freq configuration
	tempreg=0;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value()/1000000U;
 80008de:	f000 f913 	bl	8000b08 <RCC_GetPCLK1Value>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b4a      	ldr	r3, [pc, #296]	; (8000a10 <I2C_Init+0x164>)
 80008e8:	fba3 2302 	umull	r2, r3, r3, r2
 80008ec:	0c9b      	lsrs	r3, r3, #18
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008fe:	605a      	str	r2, [r3, #4]
	//slave device own address configuration
	tempreg = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	7a1b      	ldrb	r3, [r3, #8]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	461a      	mov	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4313      	orrs	r3, r2
 8000910:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	609a      	str	r2, [r3, #8]
	//CCR calculations
	uint16_t ccr_value = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	4a39      	ldr	r2, [pc, #228]	; (8000a14 <I2C_Init+0x168>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d810      	bhi.n	8000956 <I2C_Init+0xaa>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000934:	f000 f8e8 	bl	8000b08 <RCC_GetPCLK1Value>
 8000938:	4603      	mov	r3, r0
 800093a:	461a      	mov	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	fbb2 f3f3 	udiv	r3, r2, r3
 8000946:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000948:	897b      	ldrh	r3, [r7, #10]
 800094a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	4313      	orrs	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	e02f      	b.n	80009b6 <I2C_Init+0x10a>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800095c:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	7a9b      	ldrb	r3, [r3, #10]
 8000962:	039b      	lsls	r3, r3, #14
 8000964:	461a      	mov	r2, r3
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	4313      	orrs	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	7a9b      	ldrb	r3, [r3, #10]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d10c      	bne.n	800098e <I2C_Init+0xe2>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000974:	f000 f8c8 	bl	8000b08 <RCC_GetPCLK1Value>
 8000978:	4603      	mov	r3, r0
 800097a:	4619      	mov	r1, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	685a      	ldr	r2, [r3, #4]
 8000980:	4613      	mov	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4413      	add	r3, r2
 8000986:	fbb1 f3f3 	udiv	r3, r1, r3
 800098a:	817b      	strh	r3, [r7, #10]
 800098c:	e00d      	b.n	80009aa <I2C_Init+0xfe>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 800098e:	f000 f8bb 	bl	8000b08 <RCC_GetPCLK1Value>
 8000992:	4603      	mov	r3, r0
 8000994:	4619      	mov	r1, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	4613      	mov	r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	4413      	add	r3, r2
 80009a0:	009a      	lsls	r2, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80009a8:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 80009aa:	897b      	ldrh	r3, [r7, #10]
 80009ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	61da      	str	r2, [r3, #28]
	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <I2C_Init+0x168>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d80a      	bhi.n	80009de <I2C_Init+0x132>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 80009c8:	f000 f89e 	bl	8000b08 <RCC_GetPCLK1Value>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <I2C_Init+0x164>)
 80009d2:	fba3 2302 	umull	r2, r3, r3, r2
 80009d6:	0c9b      	lsrs	r3, r3, #18
 80009d8:	3301      	adds	r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	e00d      	b.n	80009fa <I2C_Init+0x14e>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 80009de:	f000 f893 	bl	8000b08 <RCC_GetPCLK1Value>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80009e8:	fb02 f303 	mul.w	r3, r2, r3
 80009ec:	0a5b      	lsrs	r3, r3, #9
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <I2C_Init+0x16c>)
 80009f0:	fba2 2303 	umull	r2, r3, r2, r3
 80009f4:	09db      	lsrs	r3, r3, #7
 80009f6:	3301      	adds	r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a04:	621a      	str	r2, [r3, #32]
}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	431bde83 	.word	0x431bde83
 8000a14:	000186a0 	.word	0x000186a0
 8000a18:	00044b83 	.word	0x00044b83

08000a1c <I2C_MasterSendData>:
		}else if (pI2Cx == I2C3)
		{
			I2C3_REG_RESET();
		}
}
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fea8 	bl	8000784 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB));
 8000a34:	bf00      	nop
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 f84f 	bl	8000ae0 <I2C_GetFlagStatus>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0f6      	beq.n	8000a36 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	78fa      	ldrb	r2, [r7, #3]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fe6f 	bl	8000734 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000a56:	bf00      	nop
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f83e 	bl	8000ae0 <I2C_GetFlagStatus>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0f6      	beq.n	8000a58 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f7ff fe78 	bl	8000760 <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0
	while(Len>0){
 8000a70:	e013      	b.n	8000a9a <I2C_MasterSendData+0x7e>
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE));
 8000a72:	bf00      	nop
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f830 	bl	8000ae0 <I2C_GetFlagStatus>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d0f6      	beq.n	8000a74 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR=*(pTxbuffer++);
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	60ba      	str	r2, [r7, #8]
 8000a8c:	781a      	ldrb	r2, [r3, #0]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	611a      	str	r2, [r3, #16]
		Len--;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	607b      	str	r3, [r7, #4]
	while(Len>0){
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1e8      	bne.n	8000a72 <I2C_MasterSendData+0x56>
	}
	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8000aa0:	bf00      	nop
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 f819 	bl	8000ae0 <I2C_GetFlagStatus>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d0f6      	beq.n	8000aa2 <I2C_MasterSendData+0x86>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 8000ab4:	bf00      	nop
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2104      	movs	r1, #4
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 f80f 	bl	8000ae0 <I2C_GetFlagStatus>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d0f6      	beq.n	8000ab6 <I2C_MasterSendData+0x9a>

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
		//   Note: generating STOP, automatically clears the BTF
		if(Sr == I2C_DISABLE_SR )
 8000ac8:	7e3b      	ldrb	r3, [r7, #24]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d104      	bne.n	8000ad8 <I2C_MasterSendData+0xbc>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fe66 	bl	80007a4 <I2C_GenerateStopCondition>

}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <I2C_GetFlagStatus>:

	return busystate;
}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName){
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
	if (pI2Cx->SR1 & FlagName){
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	695a      	ldr	r2, [r3, #20]
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	4013      	ands	r3, r2
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e000      	b.n	8000afc <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <RCC_GetPCLK1Value>:

#include "STM32F407xx_RCC_driver.h"
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0

		uint32_t pclk1,SystemClk;

		uint8_t clksrc,temp,ahbp,apb1p;

		clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000b0e:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <RCC_GetPCLK1Value+0x94>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	727b      	strb	r3, [r7, #9]

		if(clksrc == 0 )
 8000b1c:	7a7b      	ldrb	r3, [r7, #9]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <RCC_GetPCLK1Value+0x20>
		{
			SystemClk = 16000000;
 8000b22:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <RCC_GetPCLK1Value+0x98>)
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	e004      	b.n	8000b32 <RCC_GetPCLK1Value+0x2a>
		}else if(clksrc == 1)
 8000b28:	7a7b      	ldrb	r3, [r7, #9]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d101      	bne.n	8000b32 <RCC_GetPCLK1Value+0x2a>
		{
			SystemClk = 8000000;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <RCC_GetPCLK1Value+0x9c>)
 8000b30:	60fb      	str	r3, [r7, #12]
		{
//			SystemClk = RCC_GetPLLOutputClock();
		}

		//for ahb
		temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <RCC_GetPCLK1Value+0x94>)
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	091b      	lsrs	r3, r3, #4
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	723b      	strb	r3, [r7, #8]

		if(temp < 8)
 8000b40:	7a3b      	ldrb	r3, [r7, #8]
 8000b42:	2b07      	cmp	r3, #7
 8000b44:	d802      	bhi.n	8000b4c <RCC_GetPCLK1Value+0x44>
		{
			ahbp = 1;
 8000b46:	2301      	movs	r3, #1
 8000b48:	72fb      	strb	r3, [r7, #11]
 8000b4a:	e005      	b.n	8000b58 <RCC_GetPCLK1Value+0x50>
		}else
		{
			ahbp = AHB_PreScaler[temp-8];
 8000b4c:	7a3b      	ldrb	r3, [r7, #8]
 8000b4e:	3b08      	subs	r3, #8
 8000b50:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <RCC_GetPCLK1Value+0xa0>)
 8000b52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b56:	72fb      	strb	r3, [r7, #11]
		}



		//apb1
		temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <RCC_GetPCLK1Value+0x94>)
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	0a9b      	lsrs	r3, r3, #10
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	f003 0307 	and.w	r3, r3, #7
 8000b64:	723b      	strb	r3, [r7, #8]

		if(temp < 4)
 8000b66:	7a3b      	ldrb	r3, [r7, #8]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d802      	bhi.n	8000b72 <RCC_GetPCLK1Value+0x6a>
		{
			apb1p = 1;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	72bb      	strb	r3, [r7, #10]
 8000b70:	e004      	b.n	8000b7c <RCC_GetPCLK1Value+0x74>
		}else
		{
			apb1p = APB1_PreScaler[temp-4];
 8000b72:	7a3b      	ldrb	r3, [r7, #8]
 8000b74:	3b04      	subs	r3, #4
 8000b76:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <RCC_GetPCLK1Value+0xa4>)
 8000b78:	5cd3      	ldrb	r3, [r2, r3]
 8000b7a:	72bb      	strb	r3, [r7, #10]
		}

		pclk1 =  (SystemClk / ahbp) /apb1p;
 8000b7c:	7afb      	ldrb	r3, [r7, #11]
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b84:	7abb      	ldrb	r3, [r7, #10]
 8000b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8a:	607b      	str	r3, [r7, #4]

		return pclk1;
 8000b8c:	687b      	ldr	r3, [r7, #4]
	}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	00f42400 	.word	0x00f42400
 8000ba4:	007a1200 	.word	0x007a1200
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	20000010 	.word	0x20000010

08000bb0 <delay>:
#define MY_ADDR 0x61;

#define SLAVE_ADDR  0x68

void delay(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	e002      	b.n	8000bc2 <delay+0x12>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <delay+0x28>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d9f8      	bls.n	8000bbc <delay+0xc>
}
 8000bca:	bf00      	nop
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	0003d08f 	.word	0x0003d08f

08000bdc <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB9 or PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	// Internal pull-up resistors are used

	I2CPins.pGPIOx = GPIOB;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <I2C1_GPIOInits+0x40>)
 8000be4:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000be6:	2302      	movs	r3, #2
 8000be8:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000bea:	2301      	movs	r3, #1
 8000bec:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000bfa:	2306      	movs	r3, #6
 8000bfc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fbe1 	bl	80003c8 <GPIO_Init>


	//sda

	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000c06:	2307      	movs	r3, #7
 8000c08:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&I2CPins);
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fbdb 	bl	80003c8 <GPIO_Init>


}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40020400 	.word	0x40020400

08000c20 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <I2C1_Inits+0x2c>)
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <I2C1_Inits+0x30>)
 8000c28:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <I2C1_Inits+0x2c>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <I2C1_Inits+0x2c>)
 8000c32:	2261      	movs	r2, #97	; 0x61
 8000c34:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <I2C1_Inits+0x2c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <I2C1_Inits+0x2c>)
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <I2C1_Inits+0x34>)
 8000c40:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000c42:	4802      	ldr	r0, [pc, #8]	; (8000c4c <I2C1_Inits+0x2c>)
 8000c44:	f7ff fe32 	bl	80008ac <I2C_Init>

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000050 	.word	0x20000050
 8000c50:	40005400 	.word	0x40005400
 8000c54:	000186a0 	.word	0x000186a0

08000c58 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <GPIO_ButtonInit+0x2c>)
 8000c60:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000c66:	2300      	movs	r3, #0
 8000c68:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fba7 	bl	80003c8 <GPIO_Init>

}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40020000 	.word	0x40020000

08000c88 <main>:


int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af02      	add	r7, sp, #8

	GPIO_ButtonInit();
 8000c8e:	f7ff ffe3 	bl	8000c58 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 8000c92:	f7ff ffa3 	bl	8000bdc <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 8000c96:	f7ff ffc3 	bl	8000c20 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <main+0x48>)
 8000c9e:	f7ff fde9 	bl	8000874 <I2C_PeripheralControl>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000ca2:	bf00      	nop
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <main+0x4c>)
 8000ca8:	f7ff fd2e 	bl	8000708 <GPIO_ReadFromInputPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d0f8      	beq.n	8000ca4 <main+0x1c>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000cb2:	f7ff ff7d 	bl	8000bb0 <delay>

		//send some data to the slave
		I2C_MasterSendData(&I2C1Handle,some_data,strlen((char*)some_data),SLAVE_ADDR,0);
 8000cb6:	4808      	ldr	r0, [pc, #32]	; (8000cd8 <main+0x50>)
 8000cb8:	f7ff fa96 	bl	80001e8 <strlen>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	2368      	movs	r3, #104	; 0x68
 8000cc4:	4904      	ldr	r1, [pc, #16]	; (8000cd8 <main+0x50>)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <main+0x54>)
 8000cc8:	f7ff fea8 	bl	8000a1c <I2C_MasterSendData>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000ccc:	e7e9      	b.n	8000ca2 <main+0x1a>
 8000cce:	bf00      	nop
 8000cd0:	40005400 	.word	0x40005400
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	20000014 	.word	0x20000014
 8000cdc:	20000050 	.word	0x20000050

08000ce0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ce0:	480d      	ldr	r0, [pc, #52]	; (8000d18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ce2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ce4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cea:	490d      	ldr	r1, [pc, #52]	; (8000d20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <LoopForever+0xe>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d00:	4c0a      	ldr	r4, [pc, #40]	; (8000d2c <LoopForever+0x16>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d0e:	f000 f811 	bl	8000d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d12:	f7ff ffb9 	bl	8000c88 <main>

08000d16 <LoopForever>:

LoopForever:
  b LoopForever
 8000d16:	e7fe      	b.n	8000d16 <LoopForever>
  ldr   r0, =_estack
 8000d18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000d24:	08000d9c 	.word	0x08000d9c
  ldr r2, =_sbss
 8000d28:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000d2c:	20000078 	.word	0x20000078

08000d30 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC_IRQHandler>
	...

08000d34 <__libc_init_array>:
 8000d34:	b570      	push	{r4, r5, r6, lr}
 8000d36:	4d0d      	ldr	r5, [pc, #52]	; (8000d6c <__libc_init_array+0x38>)
 8000d38:	4c0d      	ldr	r4, [pc, #52]	; (8000d70 <__libc_init_array+0x3c>)
 8000d3a:	1b64      	subs	r4, r4, r5
 8000d3c:	10a4      	asrs	r4, r4, #2
 8000d3e:	2600      	movs	r6, #0
 8000d40:	42a6      	cmp	r6, r4
 8000d42:	d109      	bne.n	8000d58 <__libc_init_array+0x24>
 8000d44:	4d0b      	ldr	r5, [pc, #44]	; (8000d74 <__libc_init_array+0x40>)
 8000d46:	4c0c      	ldr	r4, [pc, #48]	; (8000d78 <__libc_init_array+0x44>)
 8000d48:	f000 f818 	bl	8000d7c <_init>
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	10a4      	asrs	r4, r4, #2
 8000d50:	2600      	movs	r6, #0
 8000d52:	42a6      	cmp	r6, r4
 8000d54:	d105      	bne.n	8000d62 <__libc_init_array+0x2e>
 8000d56:	bd70      	pop	{r4, r5, r6, pc}
 8000d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d5c:	4798      	blx	r3
 8000d5e:	3601      	adds	r6, #1
 8000d60:	e7ee      	b.n	8000d40 <__libc_init_array+0xc>
 8000d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d66:	4798      	blx	r3
 8000d68:	3601      	adds	r6, #1
 8000d6a:	e7f2      	b.n	8000d52 <__libc_init_array+0x1e>
 8000d6c:	08000d94 	.word	0x08000d94
 8000d70:	08000d94 	.word	0x08000d94
 8000d74:	08000d94 	.word	0x08000d94
 8000d78:	08000d98 	.word	0x08000d98

08000d7c <_init>:
 8000d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d7e:	bf00      	nop
 8000d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d82:	bc08      	pop	{r3}
 8000d84:	469e      	mov	lr, r3
 8000d86:	4770      	bx	lr

08000d88 <_fini>:
 8000d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d8a:	bf00      	nop
 8000d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d8e:	bc08      	pop	{r3}
 8000d90:	469e      	mov	lr, r3
 8000d92:	4770      	bx	lr
