
STM32F4xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c20  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000dc8  08000dc8  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000dc8  08000dc8  00020414  2**0
                  CONTENTS
  4 .ARM          00000000  08000dc8  08000dc8  00020414  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dc8  08000dc8  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dc8  08000dc8  00010dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dcc  08000dcc  00010dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000414  20000000  08000dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020414  2**0
                  CONTENTS
 10 .bss          00000040  20000414  20000414  00020414  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000454  20000454  00020414  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020414  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
 14 .debug_info   000017d0  00000000  00000000  00020487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000005de  00000000  00000000  00021c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000190  00000000  00000000  00022238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000011f  00000000  00000000  000223c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002963  00000000  00000000  000224e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000237b  00000000  00000000  00024e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000ac5c  00000000  00000000  000271c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000055c  00000000  00000000  00031e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00032380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000414 	.word	0x20000414
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000db0 	.word	0x08000db0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000418 	.word	0x20000418
 80001e4:	08000db0 	.word	0x08000db0

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <GPIO_PeriClockControl>:

#include <STM32F407xx_GPIO_driver.h>
/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	460b      	mov	r3, r1
 8000202:	70fb      	strb	r3, [r7, #3]
	if(EnorDi){
 8000204:	78fb      	ldrb	r3, [r7, #3]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d062      	beq.n	80002d0 <GPIO_PeriClockControl+0xd8>

				if(pGPIOx == GPIOA)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a64      	ldr	r2, [pc, #400]	; (80003a0 <GPIO_PeriClockControl+0x1a8>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d106      	bne.n	8000220 <GPIO_PeriClockControl+0x28>
				{
					GPIOA_PCLK_EN();
 8000212:	4b64      	ldr	r3, [pc, #400]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000216:	4a63      	ldr	r2, [pc, #396]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000218:	f043 0301 	orr.w	r3, r3, #1
 800021c:	6313      	str	r3, [r2, #48]	; 0x30
					}else if (pGPIOx == GPIOI)
					{
						GPIOI_PCLK_DI();
					}
	}
}
 800021e:	e0b9      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOB)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a61      	ldr	r2, [pc, #388]	; (80003a8 <GPIO_PeriClockControl+0x1b0>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d106      	bne.n	8000236 <GPIO_PeriClockControl+0x3e>
					GPIOB_PCLK_EN();
 8000228:	4b5e      	ldr	r3, [pc, #376]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022c:	4a5d      	ldr	r2, [pc, #372]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800022e:	f043 0302 	orr.w	r3, r3, #2
 8000232:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000234:	e0ae      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOC)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a5c      	ldr	r2, [pc, #368]	; (80003ac <GPIO_PeriClockControl+0x1b4>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d106      	bne.n	800024c <GPIO_PeriClockControl+0x54>
					GPIOC_PCLK_EN();
 800023e:	4b59      	ldr	r3, [pc, #356]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000242:	4a58      	ldr	r2, [pc, #352]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000244:	f043 0304 	orr.w	r3, r3, #4
 8000248:	6313      	str	r3, [r2, #48]	; 0x30
}
 800024a:	e0a3      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOD)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a58      	ldr	r2, [pc, #352]	; (80003b0 <GPIO_PeriClockControl+0x1b8>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d106      	bne.n	8000262 <GPIO_PeriClockControl+0x6a>
					GPIOD_PCLK_EN();
 8000254:	4b53      	ldr	r3, [pc, #332]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000258:	4a52      	ldr	r2, [pc, #328]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000260:	e098      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOE)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a53      	ldr	r2, [pc, #332]	; (80003b4 <GPIO_PeriClockControl+0x1bc>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d106      	bne.n	8000278 <GPIO_PeriClockControl+0x80>
					GPIOE_PCLK_EN();
 800026a:	4b4e      	ldr	r3, [pc, #312]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026e:	4a4d      	ldr	r2, [pc, #308]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000270:	f043 0310 	orr.w	r3, r3, #16
 8000274:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000276:	e08d      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOF)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a4f      	ldr	r2, [pc, #316]	; (80003b8 <GPIO_PeriClockControl+0x1c0>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d106      	bne.n	800028e <GPIO_PeriClockControl+0x96>
					GPIOF_PCLK_EN();
 8000280:	4b48      	ldr	r3, [pc, #288]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000284:	4a47      	ldr	r2, [pc, #284]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800028c:	e082      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOG)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a4a      	ldr	r2, [pc, #296]	; (80003bc <GPIO_PeriClockControl+0x1c4>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d106      	bne.n	80002a4 <GPIO_PeriClockControl+0xac>
					GPIOG_PCLK_EN();
 8000296:	4b43      	ldr	r3, [pc, #268]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029a:	4a42      	ldr	r2, [pc, #264]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800029c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a2:	e077      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOH)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a46      	ldr	r2, [pc, #280]	; (80003c0 <GPIO_PeriClockControl+0x1c8>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d106      	bne.n	80002ba <GPIO_PeriClockControl+0xc2>
					GPIOH_PCLK_EN();
 80002ac:	4b3d      	ldr	r3, [pc, #244]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b0:	4a3c      	ldr	r2, [pc, #240]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b8:	e06c      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOI)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a41      	ldr	r2, [pc, #260]	; (80003c4 <GPIO_PeriClockControl+0x1cc>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d168      	bne.n	8000394 <GPIO_PeriClockControl+0x19c>
					GPIOI_PCLK_EN();
 80002c2:	4b38      	ldr	r3, [pc, #224]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c6:	4a37      	ldr	r2, [pc, #220]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ce:	e061      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
					if(pGPIOx == GPIOA)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a33      	ldr	r2, [pc, #204]	; (80003a0 <GPIO_PeriClockControl+0x1a8>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d106      	bne.n	80002e6 <GPIO_PeriClockControl+0xee>
						GPIOA_PCLK_DI();
 80002d8:	4b32      	ldr	r3, [pc, #200]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002dc:	4a31      	ldr	r2, [pc, #196]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002de:	f023 0301 	bic.w	r3, r3, #1
 80002e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e4:	e056      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
					}else if (pGPIOx == GPIOB)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a2f      	ldr	r2, [pc, #188]	; (80003a8 <GPIO_PeriClockControl+0x1b0>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_PeriClockControl+0x104>
						GPIOB_PCLK_DI();
 80002ee:	4b2d      	ldr	r3, [pc, #180]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f2:	4a2c      	ldr	r2, [pc, #176]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002f4:	f023 0302 	bic.w	r3, r3, #2
 80002f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002fa:	e04b      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
					}else if (pGPIOx == GPIOC)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a2b      	ldr	r2, [pc, #172]	; (80003ac <GPIO_PeriClockControl+0x1b4>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_PeriClockControl+0x11a>
						GPIOC_PCLK_DI();
 8000304:	4b27      	ldr	r3, [pc, #156]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000308:	4a26      	ldr	r2, [pc, #152]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800030a:	f023 0304 	bic.w	r3, r3, #4
 800030e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000310:	e040      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
					}else if (pGPIOx == GPIOD)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a26      	ldr	r2, [pc, #152]	; (80003b0 <GPIO_PeriClockControl+0x1b8>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PeriClockControl+0x130>
						GPIOD_PCLK_DI();
 800031a:	4b22      	ldr	r3, [pc, #136]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031e:	4a21      	ldr	r2, [pc, #132]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000320:	f023 0308 	bic.w	r3, r3, #8
 8000324:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000326:	e035      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
					}else if (pGPIOx == GPIOE)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a22      	ldr	r2, [pc, #136]	; (80003b4 <GPIO_PeriClockControl+0x1bc>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <GPIO_PeriClockControl+0x146>
						GPIOE_PCLK_DI();
 8000330:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a1b      	ldr	r2, [pc, #108]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000336:	f023 0310 	bic.w	r3, r3, #16
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033c:	e02a      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
					}else if (pGPIOx == GPIOF)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a1d      	ldr	r2, [pc, #116]	; (80003b8 <GPIO_PeriClockControl+0x1c0>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PeriClockControl+0x15c>
						GPIOF_PCLK_DI();
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800034c:	f023 0320 	bic.w	r3, r3, #32
 8000350:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000352:	e01f      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
					}else if (pGPIOx == GPIOG)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a19      	ldr	r2, [pc, #100]	; (80003bc <GPIO_PeriClockControl+0x1c4>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PeriClockControl+0x172>
						GPIOG_PCLK_DI();
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000360:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000366:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000368:	e014      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
					}else if (pGPIOx == GPIOH)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <GPIO_PeriClockControl+0x1c8>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <GPIO_PeriClockControl+0x188>
						GPIOH_PCLK_DI();
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800037c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037e:	e009      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
					}else if (pGPIOx == GPIOI)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a10      	ldr	r2, [pc, #64]	; (80003c4 <GPIO_PeriClockControl+0x1cc>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d105      	bne.n	8000394 <GPIO_PeriClockControl+0x19c>
						GPIOI_PCLK_DI();
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038c:	4a05      	ldr	r2, [pc, #20]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800038e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000392:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	40020000 	.word	0x40020000
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40020400 	.word	0x40020400
 80003ac:	40020800 	.word	0x40020800
 80003b0:	40020c00 	.word	0x40020c00
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40021400 	.word	0x40021400
 80003bc:	40021800 	.word	0x40021800
 80003c0:	40021c00 	.word	0x40021c00
 80003c4:	40022000 	.word	0x40022000

080003c8 <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
		uint32_t temp=0; //temp. register
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]

		 //enable the peripheral clock

		 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2101      	movs	r1, #1
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff ff0c 	bl	80001f8 <GPIO_PeriClockControl>

		// configure the mode of gpio pin

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	795b      	ldrb	r3, [r3, #5]
 80003e4:	2b03      	cmp	r3, #3
 80003e6:	d820      	bhi.n	800042a <GPIO_Init+0x62>
		{
			//the non interrupt mode
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	795b      	ldrb	r3, [r3, #5]
 80003ec:	461a      	mov	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	791b      	ldrb	r3, [r3, #4]
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	fa02 f303 	lsl.w	r3, r2, r3
 80003f8:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	2103      	movs	r1, #3
 8000408:	fa01 f303 	lsl.w	r3, r1, r3
 800040c:	43db      	mvns	r3, r3
 800040e:	4619      	mov	r1, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	400a      	ands	r2, r1
 8000416:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	6819      	ldr	r1, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	697a      	ldr	r2, [r7, #20]
 8000424:	430a      	orrs	r2, r1
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	e0d0      	b.n	80005cc <GPIO_Init+0x204>
			}
		else{
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	795b      	ldrb	r3, [r3, #5]
 800042e:	2b04      	cmp	r3, #4
 8000430:	d117      	bne.n	8000462 <GPIO_Init+0x9a>
					{
						//1. configure the FTSR
						EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000432:	4b4b      	ldr	r3, [pc, #300]	; (8000560 <GPIO_Init+0x198>)
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	7912      	ldrb	r2, [r2, #4]
 800043a:	4611      	mov	r1, r2
 800043c:	2201      	movs	r2, #1
 800043e:	408a      	lsls	r2, r1
 8000440:	4611      	mov	r1, r2
 8000442:	4a47      	ldr	r2, [pc, #284]	; (8000560 <GPIO_Init+0x198>)
 8000444:	430b      	orrs	r3, r1
 8000446:	60d3      	str	r3, [r2, #12]
						//Clear the corresponding RTSR bit
						EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000448:	4b45      	ldr	r3, [pc, #276]	; (8000560 <GPIO_Init+0x198>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	7912      	ldrb	r2, [r2, #4]
 8000450:	4611      	mov	r1, r2
 8000452:	2201      	movs	r2, #1
 8000454:	408a      	lsls	r2, r1
 8000456:	43d2      	mvns	r2, r2
 8000458:	4611      	mov	r1, r2
 800045a:	4a41      	ldr	r2, [pc, #260]	; (8000560 <GPIO_Init+0x198>)
 800045c:	400b      	ands	r3, r1
 800045e:	6093      	str	r3, [r2, #8]
 8000460:	e035      	b.n	80004ce <GPIO_Init+0x106>

					}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	795b      	ldrb	r3, [r3, #5]
 8000466:	2b05      	cmp	r3, #5
 8000468:	d117      	bne.n	800049a <GPIO_Init+0xd2>
					{
						//1 . configure the RTSR
						EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800046a:	4b3d      	ldr	r3, [pc, #244]	; (8000560 <GPIO_Init+0x198>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	7912      	ldrb	r2, [r2, #4]
 8000472:	4611      	mov	r1, r2
 8000474:	2201      	movs	r2, #1
 8000476:	408a      	lsls	r2, r1
 8000478:	4611      	mov	r1, r2
 800047a:	4a39      	ldr	r2, [pc, #228]	; (8000560 <GPIO_Init+0x198>)
 800047c:	430b      	orrs	r3, r1
 800047e:	6093      	str	r3, [r2, #8]
						//Clear the corresponding RTSR bit
						EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000480:	4b37      	ldr	r3, [pc, #220]	; (8000560 <GPIO_Init+0x198>)
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	7912      	ldrb	r2, [r2, #4]
 8000488:	4611      	mov	r1, r2
 800048a:	2201      	movs	r2, #1
 800048c:	408a      	lsls	r2, r1
 800048e:	43d2      	mvns	r2, r2
 8000490:	4611      	mov	r1, r2
 8000492:	4a33      	ldr	r2, [pc, #204]	; (8000560 <GPIO_Init+0x198>)
 8000494:	400b      	ands	r3, r1
 8000496:	60d3      	str	r3, [r2, #12]
 8000498:	e019      	b.n	80004ce <GPIO_Init+0x106>

					}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	795b      	ldrb	r3, [r3, #5]
 800049e:	2b06      	cmp	r3, #6
 80004a0:	d115      	bne.n	80004ce <GPIO_Init+0x106>
					{
						//1. configure both FTSR and RTSR
						EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a2:	4b2f      	ldr	r3, [pc, #188]	; (8000560 <GPIO_Init+0x198>)
 80004a4:	689b      	ldr	r3, [r3, #8]
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	7912      	ldrb	r2, [r2, #4]
 80004aa:	4611      	mov	r1, r2
 80004ac:	2201      	movs	r2, #1
 80004ae:	408a      	lsls	r2, r1
 80004b0:	4611      	mov	r1, r2
 80004b2:	4a2b      	ldr	r2, [pc, #172]	; (8000560 <GPIO_Init+0x198>)
 80004b4:	430b      	orrs	r3, r1
 80004b6:	6093      	str	r3, [r2, #8]
						//Clear the corresponding RTSR bit
						EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b8:	4b29      	ldr	r3, [pc, #164]	; (8000560 <GPIO_Init+0x198>)
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	7912      	ldrb	r2, [r2, #4]
 80004c0:	4611      	mov	r1, r2
 80004c2:	2201      	movs	r2, #1
 80004c4:	408a      	lsls	r2, r1
 80004c6:	4611      	mov	r1, r2
 80004c8:	4a25      	ldr	r2, [pc, #148]	; (8000560 <GPIO_Init+0x198>)
 80004ca:	430b      	orrs	r3, r1
 80004cc:	60d3      	str	r3, [r2, #12]
					}
				//configuring the GPIO port selection in SYSCFG_EXTICR
				uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	791b      	ldrb	r3, [r3, #4]
 80004d2:	089b      	lsrs	r3, r3, #2
 80004d4:	74fb      	strb	r3, [r7, #19]
				uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	791b      	ldrb	r3, [r3, #4]
 80004da:	f003 0303 	and.w	r3, r3, #3
 80004de:	74bb      	strb	r3, [r7, #18]
				uint32_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a1f      	ldr	r2, [pc, #124]	; (8000564 <GPIO_Init+0x19c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d04e      	beq.n	8000588 <GPIO_Init+0x1c0>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a1e      	ldr	r2, [pc, #120]	; (8000568 <GPIO_Init+0x1a0>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d032      	beq.n	800055a <GPIO_Init+0x192>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a1c      	ldr	r2, [pc, #112]	; (800056c <GPIO_Init+0x1a4>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d02b      	beq.n	8000556 <GPIO_Init+0x18e>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a1b      	ldr	r2, [pc, #108]	; (8000570 <GPIO_Init+0x1a8>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d024      	beq.n	8000552 <GPIO_Init+0x18a>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a19      	ldr	r2, [pc, #100]	; (8000574 <GPIO_Init+0x1ac>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d01d      	beq.n	800054e <GPIO_Init+0x186>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a18      	ldr	r2, [pc, #96]	; (8000578 <GPIO_Init+0x1b0>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d016      	beq.n	800054a <GPIO_Init+0x182>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a16      	ldr	r2, [pc, #88]	; (800057c <GPIO_Init+0x1b4>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d00f      	beq.n	8000546 <GPIO_Init+0x17e>
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a15      	ldr	r2, [pc, #84]	; (8000580 <GPIO_Init+0x1b8>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d008      	beq.n	8000542 <GPIO_Init+0x17a>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a13      	ldr	r2, [pc, #76]	; (8000584 <GPIO_Init+0x1bc>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d101      	bne.n	800053e <GPIO_Init+0x176>
 800053a:	2308      	movs	r3, #8
 800053c:	e025      	b.n	800058a <GPIO_Init+0x1c2>
 800053e:	2300      	movs	r3, #0
 8000540:	e023      	b.n	800058a <GPIO_Init+0x1c2>
 8000542:	2307      	movs	r3, #7
 8000544:	e021      	b.n	800058a <GPIO_Init+0x1c2>
 8000546:	2306      	movs	r3, #6
 8000548:	e01f      	b.n	800058a <GPIO_Init+0x1c2>
 800054a:	2305      	movs	r3, #5
 800054c:	e01d      	b.n	800058a <GPIO_Init+0x1c2>
 800054e:	2304      	movs	r3, #4
 8000550:	e01b      	b.n	800058a <GPIO_Init+0x1c2>
 8000552:	2303      	movs	r3, #3
 8000554:	e019      	b.n	800058a <GPIO_Init+0x1c2>
 8000556:	2302      	movs	r3, #2
 8000558:	e017      	b.n	800058a <GPIO_Init+0x1c2>
 800055a:	2301      	movs	r3, #1
 800055c:	e015      	b.n	800058a <GPIO_Init+0x1c2>
 800055e:	bf00      	nop
 8000560:	40013c00 	.word	0x40013c00
 8000564:	40020000 	.word	0x40020000
 8000568:	40020400 	.word	0x40020400
 800056c:	40020800 	.word	0x40020800
 8000570:	40020c00 	.word	0x40020c00
 8000574:	40021000 	.word	0x40021000
 8000578:	40021400 	.word	0x40021400
 800057c:	40021800 	.word	0x40021800
 8000580:	40021c00 	.word	0x40021c00
 8000584:	40022000 	.word	0x40022000
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
				SYSCFG_PCLK_EN();
 800058c:	4b5b      	ldr	r3, [pc, #364]	; (80006fc <GPIO_Init+0x334>)
 800058e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000590:	4a5a      	ldr	r2, [pc, #360]	; (80006fc <GPIO_Init+0x334>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6453      	str	r3, [r2, #68]	; 0x44
				SYSCFG->EXTICR[temp1] |= portcode << ( temp2 * 4);
 8000598:	4a59      	ldr	r2, [pc, #356]	; (8000700 <GPIO_Init+0x338>)
 800059a:	7cfb      	ldrb	r3, [r7, #19]
 800059c:	3302      	adds	r3, #2
 800059e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80005a2:	7cbb      	ldrb	r3, [r7, #18]
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	409a      	lsls	r2, r3
 80005aa:	4855      	ldr	r0, [pc, #340]	; (8000700 <GPIO_Init+0x338>)
 80005ac:	7cfb      	ldrb	r3, [r7, #19]
 80005ae:	430a      	orrs	r2, r1
 80005b0:	3302      	adds	r3, #2
 80005b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

				// enabling the exti interrupt delivery using IMR
				EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005b6:	4b53      	ldr	r3, [pc, #332]	; (8000704 <GPIO_Init+0x33c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	7912      	ldrb	r2, [r2, #4]
 80005be:	4611      	mov	r1, r2
 80005c0:	2201      	movs	r2, #1
 80005c2:	408a      	lsls	r2, r1
 80005c4:	4611      	mov	r1, r2
 80005c6:	4a4f      	ldr	r2, [pc, #316]	; (8000704 <GPIO_Init+0x33c>)
 80005c8:	430b      	orrs	r3, r1
 80005ca:	6013      	str	r3, [r2, #0]
		}
		// configure the speed
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	799b      	ldrb	r3, [r3, #6]
 80005d0:	461a      	mov	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	689a      	ldr	r2, [r3, #8]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	2103      	movs	r1, #3
 80005ec:	fa01 f303 	lsl.w	r3, r1, r3
 80005f0:	43db      	mvns	r3, r3
 80005f2:	4619      	mov	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	400a      	ands	r2, r1
 80005fa:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	6899      	ldr	r1, [r3, #8]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	697a      	ldr	r2, [r7, #20]
 8000608:	430a      	orrs	r2, r1
 800060a:	609a      	str	r2, [r3, #8]

	    //configure the pupd settings
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	79db      	ldrb	r3, [r3, #7]
 8000610:	461a      	mov	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	fa02 f303 	lsl.w	r3, r2, r3
 800061c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	68da      	ldr	r2, [r3, #12]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	2103      	movs	r1, #3
 800062c:	fa01 f303 	lsl.w	r3, r1, r3
 8000630:	43db      	mvns	r3, r3
 8000632:	4619      	mov	r1, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	400a      	ands	r2, r1
 800063a:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	68d9      	ldr	r1, [r3, #12]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	697a      	ldr	r2, [r7, #20]
 8000648:	430a      	orrs	r2, r1
 800064a:	60da      	str	r2, [r3, #12]

		//configure the optype
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	7a1b      	ldrb	r3, [r3, #8]
 8000650:	461a      	mov	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	685a      	ldr	r2, [r3, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	4619      	mov	r1, r3
 8000668:	2301      	movs	r3, #1
 800066a:	408b      	lsls	r3, r1
 800066c:	43db      	mvns	r3, r3
 800066e:	4619      	mov	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	400a      	ands	r2, r1
 8000676:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	6859      	ldr	r1, [r3, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	697a      	ldr	r2, [r7, #20]
 8000684:	430a      	orrs	r2, r1
 8000686:	605a      	str	r2, [r3, #4]
	    //configure the alt functionality
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	795b      	ldrb	r3, [r3, #5]
 800068c:	2b02      	cmp	r3, #2
 800068e:	d131      	bne.n	80006f4 <GPIO_Init+0x32c>
		{
			//configure the alt function registers.
			uint8_t temp1, temp2;

			temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	791b      	ldrb	r3, [r3, #4]
 8000694:	08db      	lsrs	r3, r3, #3
 8000696:	72fb      	strb	r3, [r7, #11]
			temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	791b      	ldrb	r3, [r3, #4]
 800069c:	f003 0307 	and.w	r3, r3, #7
 80006a0:	72bb      	strb	r3, [r7, #10]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	7afa      	ldrb	r2, [r7, #11]
 80006a8:	3208      	adds	r2, #8
 80006aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006ae:	7abb      	ldrb	r3, [r7, #10]
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	220f      	movs	r2, #15
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	43db      	mvns	r3, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	7afa      	ldrb	r2, [r7, #11]
 80006c2:	4001      	ands	r1, r0
 80006c4:	3208      	adds	r2, #8
 80006c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	7afa      	ldrb	r2, [r7, #11]
 80006d0:	3208      	adds	r2, #8
 80006d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a5b      	ldrb	r3, [r3, #9]
 80006da:	461a      	mov	r2, r3
 80006dc:	7abb      	ldrb	r3, [r7, #10]
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	fa02 f303 	lsl.w	r3, r2, r3
 80006e4:	4618      	mov	r0, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	7afa      	ldrb	r2, [r7, #11]
 80006ec:	4301      	orrs	r1, r0
 80006ee:	3208      	adds	r2, #8
 80006f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
}
 80006f4:	bf00      	nop
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40013800 	.word	0x40013800
 8000704:	40013c00 	.word	0x40013c00

08000708 <GPIO_ReadFromInputPin>:


/*
 * Data read and write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value=(uint8_t)((pGPIOx->IDR>>PinNumber) & 0x1);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	691a      	ldr	r2, [r3, #16]
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	fa22 f303 	lsr.w	r3, r2, r3
 800071e:	b2db      	uxtb	r3, r3
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	73fb      	strb	r3, [r7, #15]
	return value;
 8000726:	7bfb      	ldrb	r3, [r7, #15]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <RCC_GetPCLK1Value>:

#include "STM32F407xx_RCC_driver.h"
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0

		uint32_t pclk1,SystemClk;

		uint8_t clksrc,temp,ahbp,apb1p;

		clksrc = ((RCC->CFGR >> 2) & 0x3);
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <RCC_GetPCLK1Value+0x94>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	089b      	lsrs	r3, r3, #2
 8000740:	b2db      	uxtb	r3, r3
 8000742:	f003 0303 	and.w	r3, r3, #3
 8000746:	727b      	strb	r3, [r7, #9]

		if(clksrc == 0 )
 8000748:	7a7b      	ldrb	r3, [r7, #9]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d102      	bne.n	8000754 <RCC_GetPCLK1Value+0x20>
		{
			SystemClk = 16000000;
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <RCC_GetPCLK1Value+0x98>)
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	e004      	b.n	800075e <RCC_GetPCLK1Value+0x2a>
		}else if(clksrc == 1)
 8000754:	7a7b      	ldrb	r3, [r7, #9]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d101      	bne.n	800075e <RCC_GetPCLK1Value+0x2a>
		{
			SystemClk = 8000000;
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <RCC_GetPCLK1Value+0x9c>)
 800075c:	60fb      	str	r3, [r7, #12]
		{
//			SystemClk = RCC_GetPLLOutputClock();
		}

		//for ahb
		temp = ((RCC->CFGR >> 4 ) & 0xF);
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <RCC_GetPCLK1Value+0x94>)
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	091b      	lsrs	r3, r3, #4
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 030f 	and.w	r3, r3, #15
 800076a:	723b      	strb	r3, [r7, #8]

		if(temp < 8)
 800076c:	7a3b      	ldrb	r3, [r7, #8]
 800076e:	2b07      	cmp	r3, #7
 8000770:	d802      	bhi.n	8000778 <RCC_GetPCLK1Value+0x44>
		{
			ahbp = 1;
 8000772:	2301      	movs	r3, #1
 8000774:	72fb      	strb	r3, [r7, #11]
 8000776:	e005      	b.n	8000784 <RCC_GetPCLK1Value+0x50>
		}else
		{
			ahbp = AHB_PreScaler[temp-8];
 8000778:	7a3b      	ldrb	r3, [r7, #8]
 800077a:	3b08      	subs	r3, #8
 800077c:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <RCC_GetPCLK1Value+0xa0>)
 800077e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000782:	72fb      	strb	r3, [r7, #11]
		}



		//apb1
		temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000784:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <RCC_GetPCLK1Value+0x94>)
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	0a9b      	lsrs	r3, r3, #10
 800078a:	b2db      	uxtb	r3, r3
 800078c:	f003 0307 	and.w	r3, r3, #7
 8000790:	723b      	strb	r3, [r7, #8]

		if(temp < 4)
 8000792:	7a3b      	ldrb	r3, [r7, #8]
 8000794:	2b03      	cmp	r3, #3
 8000796:	d802      	bhi.n	800079e <RCC_GetPCLK1Value+0x6a>
		{
			apb1p = 1;
 8000798:	2301      	movs	r3, #1
 800079a:	72bb      	strb	r3, [r7, #10]
 800079c:	e004      	b.n	80007a8 <RCC_GetPCLK1Value+0x74>
		}else
		{
			apb1p = APB1_PreScaler[temp-4];
 800079e:	7a3b      	ldrb	r3, [r7, #8]
 80007a0:	3b04      	subs	r3, #4
 80007a2:	4a0d      	ldr	r2, [pc, #52]	; (80007d8 <RCC_GetPCLK1Value+0xa4>)
 80007a4:	5cd3      	ldrb	r3, [r2, r3]
 80007a6:	72bb      	strb	r3, [r7, #10]
		}

		pclk1 =  (SystemClk / ahbp) /apb1p;
 80007a8:	7afb      	ldrb	r3, [r7, #11]
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80007b0:	7abb      	ldrb	r3, [r7, #10]
 80007b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b6:	607b      	str	r3, [r7, #4]

		return pclk1;
 80007b8:	687b      	ldr	r3, [r7, #4]
	}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	00f42400 	.word	0x00f42400
 80007d0:	007a1200 	.word	0x007a1200
 80007d4:	20000000 	.word	0x20000000
 80007d8:	20000010 	.word	0x20000010

080007dc <RCC_GetPCLK2Value>:



uint32_t RCC_GetPCLK2Value(){
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

}
 80007e0:	bf00      	nop
 80007e2:	4618      	mov	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <USART_PeriClockControl>:
#include "STM32F407xx.h"

/*
 * Peripheral Clock setup
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi){
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d12b      	bne.n	8000856 <USART_PeriClockControl+0x6a>
		{
			if(pUSARTx == USART1)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a2d      	ldr	r2, [pc, #180]	; (80008b8 <USART_PeriClockControl+0xcc>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d106      	bne.n	8000814 <USART_PeriClockControl+0x28>
			{
				USART1_PCLK_EN();
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <USART_PeriClockControl+0xd0>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	4a2c      	ldr	r2, [pc, #176]	; (80008bc <USART_PeriClockControl+0xd0>)
 800080c:	f043 0310 	orr.w	r3, r3, #16
 8000810:	6453      	str	r3, [r2, #68]	; 0x44
			{
				UART4_PCLK_DI();
			}

		}
}
 8000812:	e04b      	b.n	80008ac <USART_PeriClockControl+0xc0>
			}else if (pUSARTx == USART2)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a2a      	ldr	r2, [pc, #168]	; (80008c0 <USART_PeriClockControl+0xd4>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d106      	bne.n	800082a <USART_PeriClockControl+0x3e>
				USART2_PCLK_EN();
 800081c:	4b27      	ldr	r3, [pc, #156]	; (80008bc <USART_PeriClockControl+0xd0>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a26      	ldr	r2, [pc, #152]	; (80008bc <USART_PeriClockControl+0xd0>)
 8000822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000828:	e040      	b.n	80008ac <USART_PeriClockControl+0xc0>
			}else if (pUSARTx == USART3)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a25      	ldr	r2, [pc, #148]	; (80008c4 <USART_PeriClockControl+0xd8>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d106      	bne.n	8000840 <USART_PeriClockControl+0x54>
				USART3_PCLK_EN();
 8000832:	4b22      	ldr	r3, [pc, #136]	; (80008bc <USART_PeriClockControl+0xd0>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a21      	ldr	r2, [pc, #132]	; (80008bc <USART_PeriClockControl+0xd0>)
 8000838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800083e:	e035      	b.n	80008ac <USART_PeriClockControl+0xc0>
			else if (pUSARTx == UART4)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a21      	ldr	r2, [pc, #132]	; (80008c8 <USART_PeriClockControl+0xdc>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d131      	bne.n	80008ac <USART_PeriClockControl+0xc0>
				UART4_PCLK_EN();
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <USART_PeriClockControl+0xd0>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <USART_PeriClockControl+0xd0>)
 800084e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000852:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000854:	e02a      	b.n	80008ac <USART_PeriClockControl+0xc0>
			if(pUSARTx == USART1)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <USART_PeriClockControl+0xcc>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d106      	bne.n	800086c <USART_PeriClockControl+0x80>
				USART1_PCLK_DI();
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <USART_PeriClockControl+0xd0>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a16      	ldr	r2, [pc, #88]	; (80008bc <USART_PeriClockControl+0xd0>)
 8000864:	f023 0310 	bic.w	r3, r3, #16
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
}
 800086a:	e01f      	b.n	80008ac <USART_PeriClockControl+0xc0>
			}else if (pUSARTx == USART2)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <USART_PeriClockControl+0xd4>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d106      	bne.n	8000882 <USART_PeriClockControl+0x96>
				USART2_PCLK_DI();
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <USART_PeriClockControl+0xd0>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	4a10      	ldr	r2, [pc, #64]	; (80008bc <USART_PeriClockControl+0xd0>)
 800087a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800087e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000880:	e014      	b.n	80008ac <USART_PeriClockControl+0xc0>
			}else if (pUSARTx == USART3)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <USART_PeriClockControl+0xd8>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d106      	bne.n	8000898 <USART_PeriClockControl+0xac>
				USART3_PCLK_DI();
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <USART_PeriClockControl+0xd0>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <USART_PeriClockControl+0xd0>)
 8000890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000896:	e009      	b.n	80008ac <USART_PeriClockControl+0xc0>
			else if (pUSARTx == UART4)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <USART_PeriClockControl+0xdc>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d105      	bne.n	80008ac <USART_PeriClockControl+0xc0>
				UART4_PCLK_DI();
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <USART_PeriClockControl+0xd0>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	4a05      	ldr	r2, [pc, #20]	; (80008bc <USART_PeriClockControl+0xd0>)
 80008a6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80008aa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	40011000 	.word	0x40011000
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40004400 	.word	0x40004400
 80008c4:	40004800 	.word	0x40004800
 80008c8:	40004c00 	.word	0x40004c00

080008cc <USART_Init>:

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]


	uint32_t tempreg=0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implementing the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2101      	movs	r1, #1
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff84 	bl	80007ec <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	791b      	ldrb	r3, [r3, #4]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d104      	bne.n	80008f6 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	e010      	b.n	8000918 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	791b      	ldrb	r3, [r3, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d104      	bne.n	8000908 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	e007      	b.n	8000918 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	791b      	ldrb	r3, [r3, #4]
 800090c:	2b02      	cmp	r3, #2
 800090e:	d103      	bne.n	8000918 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f043 030c 	orr.w	r3, r3, #12
 8000916:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	7b5b      	ldrb	r3, [r3, #13]
 800091c:	031b      	lsls	r3, r3, #12
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4313      	orrs	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	7b9b      	ldrb	r3, [r3, #14]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d104      	bne.n	8000938 <USART_Init+0x6c>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	e00b      	b.n	8000950 <USART_Init+0x84>

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7b9b      	ldrb	r3, [r3, #14]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d107      	bne.n	8000950 <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000946:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800094e:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	7b1b      	ldrb	r3, [r3, #12]
 8000960:	031b      	lsls	r3, r3, #12
 8000962:	461a      	mov	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4313      	orrs	r3, r2
 8000968:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	7bdb      	ldrb	r3, [r3, #15]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d104      	bne.n	8000988 <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	e014      	b.n	80009b2 <USART_Init+0xe6>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7bdb      	ldrb	r3, [r3, #15]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d104      	bne.n	800099a <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	e00b      	b.n	80009b2 <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	7bdb      	ldrb	r3, [r3, #15]
 800099e:	2b03      	cmp	r3, #3
 80009a0:	d107      	bne.n	80009b2 <USART_Init+0xe6>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009a8:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b0:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	4619      	mov	r1, r3
 80009c4:	4610      	mov	r0, r2
 80009c6:	f000 f883 	bl	8000ad0 <USART_SetBaudRate>

}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <USART_SendData>:

/*
 * Data Send and Receive
 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b086      	sub	sp, #24
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	e031      	b.n	8000a48 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 80009e4:	bf00      	nop
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f83e 	bl	8000a6e <USART_GetFlagStatus>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0f6      	beq.n	80009e6 <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	7b5b      	ldrb	r3, [r3, #13]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d118      	bne.n	8000a32 <USART_SendData+0x60>
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a12:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	7b9b      	ldrb	r3, [r3, #14]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d106      	bne.n	8000a2a <USART_SendData+0x58>
			{
				//No parity is used in this transfer , so 9bits of user data will be sent
				// increment pTxBuffer twice
				pTxBuffer++;
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	3301      	adds	r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	e00b      	b.n	8000a42 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	e007      	b.n	8000a42 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]


			pTxBuffer++;
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	3301      	adds	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d3c9      	bcc.n	80009e4 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000a50:	bf00      	nop
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2140      	movs	r1, #64	; 0x40
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 f808 	bl	8000a6e <USART_GetFlagStatus>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d0f6      	beq.n	8000a52 <USART_SendData+0x80>
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <USART_GetFlagStatus>:
/*
 * Other Peripheral Control APIs
 */

uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	460b      	mov	r3, r1
 8000a78:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	78fb      	ldrb	r3, [r7, #3]
 8000a80:	4013      	ands	r3, r2
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e000      	b.n	8000a8c <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <USART_PeripheralControl>:
void USART_ClearFlag(USART_RegDef_t *pUSARTx, uint16_t StatusFlagName)
{
	pUSARTx->SR &= ~(StatusFlagName);

}
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi){
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi)
 8000aa4:	78fb      	ldrb	r3, [r7, #3]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d006      	beq.n	8000ab8 <USART_PeripheralControl+0x20>
		{
			pUSARTx->CR1 |= (1 << 13);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	60da      	str	r2, [r3, #12]
		}else
		{
			pUSARTx->CR1 &= ~(1 << 13);
		}
}
 8000ab6:	e005      	b.n	8000ac4 <USART_PeripheralControl+0x2c>
			pUSARTx->CR1 &= ~(1 << 13);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	60da      	str	r2, [r3, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <USART_SetBaudRate>:
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a31      	ldr	r2, [pc, #196]	; (8000ba8 <USART_SetBaudRate+0xd8>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d003      	beq.n	8000aee <USART_SetBaudRate+0x1e>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a30      	ldr	r2, [pc, #192]	; (8000bac <USART_SetBaudRate+0xdc>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d103      	bne.n	8000af6 <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000aee:	f7ff fe75 	bl	80007dc <RCC_GetPCLK2Value>
 8000af2:	61f8      	str	r0, [r7, #28]
 8000af4:	e002      	b.n	8000afc <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000af6:	f7ff fe1d 	bl	8000734 <RCC_GetPCLK1Value>
 8000afa:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d00b      	beq.n	8000b20 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000b08:	69fa      	ldr	r2, [r7, #28]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	4413      	add	r3, r2
 8000b10:	009a      	lsls	r2, r3, #2
 8000b12:	441a      	add	r2, r3
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	e00a      	b.n	8000b36 <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000b20:	69fa      	ldr	r2, [r7, #28]
 8000b22:	4613      	mov	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4413      	add	r3, r2
 8000b28:	009a      	lsls	r2, r3, #2
 8000b2a:	441a      	add	r2, r3
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b34:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	4a1d      	ldr	r2, [pc, #116]	; (8000bb0 <USART_SetBaudRate+0xe0>)
 8000b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3e:	095b      	lsrs	r3, r3, #5
 8000b40:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	011b      	lsls	r3, r3, #4
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2264      	movs	r2, #100	; 0x64
 8000b50:	fb02 f303 	mul.w	r3, r2, r3
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d00a      	beq.n	8000b7c <USART_SetBaudRate+0xac>
   {
	  //over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	3332      	adds	r3, #50	; 0x32
 8000b6c:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <USART_SetBaudRate+0xe0>)
 8000b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b72:	095b      	lsrs	r3, r3, #5
 8000b74:	f003 0307 	and.w	r3, r3, #7
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	e009      	b.n	8000b90 <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	011b      	lsls	r3, r3, #4
 8000b80:	3332      	adds	r3, #50	; 0x32
 8000b82:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <USART_SetBaudRate+0xe0>)
 8000b84:	fba2 2303 	umull	r2, r3, r2, r3
 8000b88:	095b      	lsrs	r3, r3, #5
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	617b      	str	r3, [r7, #20]

   }


  tempreg |= F_part;
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]


  pUSARTx->BRR = tempreg;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	609a      	str	r2, [r3, #8]
}
 8000b9e:	bf00      	nop
 8000ba0:	3720      	adds	r7, #32
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40011000 	.word	0x40011000
 8000bac:	40011400 	.word	0x40011400
 8000bb0:	51eb851f 	.word	0x51eb851f

08000bb4 <USART2_Init>:
char msg[1024] = "UART Tx testing...\n\r";

USART_Handle_t usart2_handle;

void USART2_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <USART2_Init+0x3c>)
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <USART2_Init+0x40>)
 8000bbc:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <USART2_Init+0x3c>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc4:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <USART2_Init+0x3c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <USART2_Init+0x3c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <USART2_Init+0x3c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <USART2_Init+0x3c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <USART2_Init+0x3c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <USART2_Init+0x3c>)
 8000be6:	f7ff fe71 	bl	80008cc <USART_Init>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000430 	.word	0x20000430
 8000bf4:	40004400 	.word	0x40004400

08000bf8 <USART2_GPIOInit>:

void 	USART2_GPIOInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <USART2_GPIOInit+0x40>)
 8000c00:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000c02:	2302      	movs	r3, #2
 8000c04:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000c06:	2300      	movs	r3, #0
 8000c08:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 8000c12:	2307      	movs	r3, #7
 8000c14:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fbd3 	bl	80003c8 <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000c22:	2303      	movs	r3, #3
 8000c24:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fbcd 	bl	80003c8 <GPIO_Init>


}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40020000 	.word	0x40020000

08000c3c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <GPIO_ButtonInit+0x54>)
 8000c44:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000c52:	2300      	movs	r3, #0
 8000c54:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fbb4 	bl	80003c8 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <GPIO_ButtonInit+0x58>)
 8000c62:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000c64:	230c      	movs	r3, #12
 8000c66:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000c70:	2301      	movs	r3, #1
 8000c72:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000c74:	2300      	movs	r3, #0
 8000c76:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 8000c78:	2101      	movs	r1, #1
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <GPIO_ButtonInit+0x58>)
 8000c7c:	f7ff fabc 	bl	80001f8 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 8000c80:	463b      	mov	r3, r7
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fba0 	bl	80003c8 <GPIO_Init>

}
 8000c88:	bf00      	nop
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40020000 	.word	0x40020000
 8000c94:	40020c00 	.word	0x40020c00

08000c98 <delay>:

void delay(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	e002      	b.n	8000caa <delay+0x12>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <delay+0x28>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d9f8      	bls.n	8000ca4 <delay+0xc>
}
 8000cb2:	bf00      	nop
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	0003d08f 	.word	0x0003d08f

08000cc4 <main>:


int main(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 8000cc8:	f7ff ffb8 	bl	8000c3c <GPIO_ButtonInit>

	USART2_GPIOInit();
 8000ccc:	f7ff ff94 	bl	8000bf8 <USART2_GPIOInit>

    USART2_Init();
 8000cd0:	f7ff ff70 	bl	8000bb4 <USART2_Init>

    USART_PeripheralControl(USART2,ENABLE);
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	480b      	ldr	r0, [pc, #44]	; (8000d04 <main+0x40>)
 8000cd8:	f7ff fede 	bl	8000a98 <USART_PeripheralControl>

    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000cdc:	bf00      	nop
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4809      	ldr	r0, [pc, #36]	; (8000d08 <main+0x44>)
 8000ce2:	f7ff fd11 	bl	8000708 <GPIO_ReadFromInputPin>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f8      	beq.n	8000cde <main+0x1a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000cec:	f7ff ffd4 	bl	8000c98 <delay>

		USART_SendData(&usart2_handle,(uint8_t*)msg,strlen(msg));
 8000cf0:	4806      	ldr	r0, [pc, #24]	; (8000d0c <main+0x48>)
 8000cf2:	f7ff fa79 	bl	80001e8 <strlen>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4904      	ldr	r1, [pc, #16]	; (8000d0c <main+0x48>)
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <main+0x4c>)
 8000cfe:	f7ff fe68 	bl	80009d2 <USART_SendData>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000d02:	e7eb      	b.n	8000cdc <main+0x18>
 8000d04:	40004400 	.word	0x40004400
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	20000014 	.word	0x20000014
 8000d10:	20000430 	.word	0x20000430

08000d14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d18:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1e:	490d      	ldr	r1, [pc, #52]	; (8000d54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <LoopForever+0xe>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d34:	4c0a      	ldr	r4, [pc, #40]	; (8000d60 <LoopForever+0x16>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d42:	f000 f811 	bl	8000d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d46:	f7ff ffbd 	bl	8000cc4 <main>

08000d4a <LoopForever>:

LoopForever:
  b LoopForever
 8000d4a:	e7fe      	b.n	8000d4a <LoopForever>
  ldr   r0, =_estack
 8000d4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 8000d58:	08000dd0 	.word	0x08000dd0
  ldr r2, =_sbss
 8000d5c:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 8000d60:	20000454 	.word	0x20000454

08000d64 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC_IRQHandler>
	...

08000d68 <__libc_init_array>:
 8000d68:	b570      	push	{r4, r5, r6, lr}
 8000d6a:	4d0d      	ldr	r5, [pc, #52]	; (8000da0 <__libc_init_array+0x38>)
 8000d6c:	4c0d      	ldr	r4, [pc, #52]	; (8000da4 <__libc_init_array+0x3c>)
 8000d6e:	1b64      	subs	r4, r4, r5
 8000d70:	10a4      	asrs	r4, r4, #2
 8000d72:	2600      	movs	r6, #0
 8000d74:	42a6      	cmp	r6, r4
 8000d76:	d109      	bne.n	8000d8c <__libc_init_array+0x24>
 8000d78:	4d0b      	ldr	r5, [pc, #44]	; (8000da8 <__libc_init_array+0x40>)
 8000d7a:	4c0c      	ldr	r4, [pc, #48]	; (8000dac <__libc_init_array+0x44>)
 8000d7c:	f000 f818 	bl	8000db0 <_init>
 8000d80:	1b64      	subs	r4, r4, r5
 8000d82:	10a4      	asrs	r4, r4, #2
 8000d84:	2600      	movs	r6, #0
 8000d86:	42a6      	cmp	r6, r4
 8000d88:	d105      	bne.n	8000d96 <__libc_init_array+0x2e>
 8000d8a:	bd70      	pop	{r4, r5, r6, pc}
 8000d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d90:	4798      	blx	r3
 8000d92:	3601      	adds	r6, #1
 8000d94:	e7ee      	b.n	8000d74 <__libc_init_array+0xc>
 8000d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d9a:	4798      	blx	r3
 8000d9c:	3601      	adds	r6, #1
 8000d9e:	e7f2      	b.n	8000d86 <__libc_init_array+0x1e>
 8000da0:	08000dc8 	.word	0x08000dc8
 8000da4:	08000dc8 	.word	0x08000dc8
 8000da8:	08000dc8 	.word	0x08000dc8
 8000dac:	08000dcc 	.word	0x08000dcc

08000db0 <_init>:
 8000db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db2:	bf00      	nop
 8000db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000db6:	bc08      	pop	{r3}
 8000db8:	469e      	mov	lr, r3
 8000dba:	4770      	bx	lr

08000dbc <_fini>:
 8000dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dbe:	bf00      	nop
 8000dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dc2:	bc08      	pop	{r3}
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	4770      	bx	lr
